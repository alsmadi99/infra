# name: Deploy Services

# on:
#   push:
#     branches:
#       - main

# jobs:
#   clone:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: SSH and deploy Grafana on Hetzner
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.HETZNER_IP }}
#           username: ${{ secrets.HETZNER_USERNAME }}
#           key: ${{ secrets.HETZNER_SSH_KEY }}
#           port: ${{ secrets.HETZNER_PORT }}
#           script: |
#             git clone git@github.com:smadixd/nginx.git || git -C nginx pull origin main

#   nginx:
#     runs-on: ubuntu-latest
#     needs: clone
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: SSH and deploy Blackbox Exporter on Hetzner
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.HETZNER_IP }}
#           username: ${{ secrets.HETZNER_USERNAME }}
#           key: ${{ secrets.HETZNER_SSH_KEY }}
#           port: ${{ secrets.HETZNER_PORT }}
#           script: |
#             cd nginx/nginx
#             sudo docker build --no-cache -t my-nginx .
#             sudo docker stop my-nginx || true
#             sudo docker rm my-nginx || true
#             sudo docker network create my-network || true
#             sudo docker run -d --name my-nginx --network my-network -v /etc/letsencrypt:/etc/letsencrypt:ro -p 127.0.0.1:80:80 -p 443:443 my-nginx

#   deploy_grafana:
#     runs-on: ubuntu-latest
#     needs: nginx
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: SSH and deploy Grafana on Hetzner
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.HETZNER_IP }}
#           username: ${{ secrets.HETZNER_USERNAME }}
#           key: ${{ secrets.HETZNER_SSH_KEY }}
#           port: ${{ secrets.HETZNER_PORT }}
#           script: |
#             cd nginx/grafana
#             sudo docker build --no-cache -t my-grafana .
#             sudo docker stop my-grafana || true
#             sudo docker rm my-grafana || true
#             sudo docker run -d --name my-grafana -p 127.0.0.1:8080:8080 --network my-network -v grafana_data:/var/lib/grafana my-grafana

#   deploy_prometheus:
#     runs-on: ubuntu-latest
#     needs: nginx
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: SSH and deploy Prometheus on Hetzner
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.HETZNER_IP }}
#           username: ${{ secrets.HETZNER_USERNAME }}
#           key: ${{ secrets.HETZNER_SSH_KEY }}
#           port: ${{ secrets.HETZNER_PORT }}
#           script: |
#             cd nginx/prometheus
#             sudo docker build --no-cache -t my-prometheus .
#             sudo docker stop my-prometheus || true
#             sudo docker rm my-prometheus || true
#             sudo docker run -d --name my-prometheus -p 127.0.0.1:9090:9090 --network my-network -v prometheus_data:/prometheus my-prometheus

#   deploy_nginx_exporter:
#     runs-on: ubuntu-latest
#     needs: nginx
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: SSH and deploy NGINX Exporter on Hetzner
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.HETZNER_IP }}
#           username: ${{ secrets.HETZNER_USERNAME }}
#           key: ${{ secrets.HETZNER_SSH_KEY }}
#           port: ${{ secrets.HETZNER_PORT }}
#           script: |
#             cd nginx/nginx-exporter
#             sudo docker build --no-cache -t my-nginx-exporter .
#             sudo docker stop my-nginx-exporter || true
#             sudo docker rm my-nginx-exporter || true
#             sudo docker run -d --name my-nginx-exporter --network my-network --network-alias=my-nginx -p 127.0.0.1:9113:9113 my-nginx-exporter

#   deploy_blackbox_exporter:
#     runs-on: ubuntu-latest
#     needs: nginx
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: SSH and deploy Blackbox Exporter on Hetzner
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.HETZNER_IP }}
#           username: ${{ secrets.HETZNER_USERNAME }}
#           key: ${{ secrets.HETZNER_SSH_KEY }}
#           port: ${{ secrets.HETZNER_PORT }}
#           script: |
#             cd nginx/blackbox-exporter
#             sudo docker build --no-cache -t my-blackbox-exporter .
#             sudo docker stop my-blackbox-exporter || true
#             sudo docker rm my-blackbox-exporter || true
#             sudo docker run -d --name my-blackbox-exporter --network my-network -p 127.0.0.1:9115:9115 my-blackbox-exporter

#   # deploy_fluentd:
#   #   runs-on: ubuntu-latest
#   #   needs: nginx
#   #   steps:
#   #     - name: Checkout code
#   #       uses: actions/checkout@v3

#   #     - name: SSH and deploy Fluentd on Hetzner
#   #       uses: appleboy/ssh-action@master
#   #       with:
#   #         host: ${{ secrets.HETZNER_IP }}
#   #         username: ${{ secrets.HETZNER_USERNAME }}
#   #         key: ${{ secrets.HETZNER_SSH_KEY }}
#   #         port: ${{ secrets.HETZNER_PORT }}
#   #         script: |
#   #           cd nginx/fluentd
#   #           sudo docker build --no-cache -t my-fluentd .
#   #           sudo docker stop my-fluentd || true
#   #           sudo docker rm my-fluentd || true
#   #           sudo docker run -d --name my-fluentd --network my-network -p 127.0.0.1:24231:24231 -p 127.0.0.1:24224:24224 my-fluentd

name: Build and Push to Artifact Registry

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT }}
  REPO_NAME: my-docker-repo
  LOCATION: europe-west3

jobs:
  push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Setup gcloud CLI
      - id: "auth"
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: "${{ secrets.GCP_CREDENTIALS }}"

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v1"

      - name: Configure Docker to use the gcloud command-line tool as a credential helper
        run: gcloud auth configure-docker ${{ env.LOCATION }}-docker.pkg.dev

      # Build and push nginx
      - name: Build and push NGINX Docker image
        run: |
          docker build -t ${{ env.LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/nginx:latest ./nginx
          docker push ${{ env.LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/nginx:latest

      # Build and push grafana
      - name: Build and push Grafana Docker image
        run: |
          docker build -t ${{ env.LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/grafana:latest ./grafana
          docker push ${{ env.LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/grafana:latest

      # Build and push prometheus
      - name: Build and push Prometheus Docker image
        run: |
          docker build -t ${{ env.LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/prometheus:latest ./prometheus
          docker push ${{ env.LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/prometheus:latest

      # Build and push nginx exporter
      - name: Build and push Nginx Exporter Docker image
        run: |
          docker build -t ${{ env.LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/nginx-exporter:latest ./nginx-exporter
          docker push ${{ env.LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/nginx-exporter:latest

      # Build and push blackbox exporter
      - name: Build and push Nginx Exporter Docker image
        run: |
          docker build -t ${{ env.LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/blackbox-exporter:latest ./blackbox-exporter
          docker push ${{ env.LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/blackbox-exporter:latest

  deploy:
    runs-on: ubuntu-latest
    # needs: push
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - id: "auth"
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: "${{ secrets.GCP_CREDENTIALS }}"

      - id: "compute-ssh"
        name: SSH and run Docker containers
        uses: "google-github-actions/ssh-compute@v0"
        with:
          instance_name: "${{ secrets.INSTANCE_NAME }}"
          zone: "${{ secrets.ZONE }}"
          ssh_private_key: "${{ secrets.SSH_KEY }}"
          script: |
            whoami
            docker pull $LOCATION-docker.pkg.dev/$PROJECT_ID/$REPO_NAME/nginx:latest
            docker pull $LOCATION-docker.pkg.dev/$PROJECT_ID/$REPO_NAME/grafana:latest
            docker pull $LOCATION-docker.pkg.dev/$PROJECT_ID/$REPO_NAME/prometheus:latest
            docker pull $LOCATION-docker.pkg.dev/$PROJECT_ID/$REPO_NAME/nginx-exporter:latest
            docker pull $LOCATION-docker.pkg.dev/$PROJECT_ID/$REPO_NAME/blackbox-exporter:latest

            docker stop nginx || true
            docker rm nginx || true
            docker run -d --name nginx --network my-network -p 127.0.0.1:80:80 -p 443:443 $LOCATION-docker.pkg.dev/$PROJECT_ID/$REPO_NAME/nginx:latest

            docker stop grafana || true
            docker rm grafana || true
            docker run -d --name grafana --network my-network -p 127.0.0.1:3000:3000 $LOCATION-docker.pkg.dev/$PROJECT_ID/$REPO_NAME/grafana:latest

            docker stop prometheus || true
            docker rm prometheus || true
            docker run -d --name prometheus --network my-network -p 127.0.0.1:9090:9090 $LOCATION-docker.pkg.dev/$PROJECT_ID/$REPO_NAME/prometheus:latest

            docker stop nginx-exporter || true
            docker rm nginx-exporter || true
            docker run -d --name nginx-exporter --network my-network -p 127.0.0.1:9113:9113 $LOCATION-docker.pkg.dev/$PROJECT_ID/$REPO_NAME/nginx-exporter:latest

            docker stop blackbox-exporter || true
            docker rm blackbox-exporter || true
            docker run -d --name blackbox-exporter --network my-network -p 127.0.0.1:9115:9115 $LOCATION-docker.pkg.dev/$PROJECT_ID/$REPO_NAME/blackbox-exporter:latest
